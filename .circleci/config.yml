workflows: # tells circleCI to do all test jobs for ui and api, then deploy both apps to heroku
  version: 2
  build-deploy:
    jobs:
    - test-build-ui
    - test-build-api
    - test-build-docker-compose
    - heroku-deploy-ui:
        requires:
        - test-build-ui
        filters:
          branches:
            only: master
    - heroku-deploy-api:
        requires:
        - test-build-api
        filters:
          branches:
            only: master
version: 2 # use CircleCI 2.0
jobs: # a collection of steps
  test-build-ui: # runs not using Workflows must have a `build` job as entry point
    working_directory: ~/ui # directory where steps will run
    docker: # run the steps with Docker
      - image: circleci/node:10.14.1 # ...with this image as the primary container; this is where all `steps` will run
    steps: # a collection of executable commands
      - checkout # special step to check out source code to working directory
      - run: # updates NPM, installs in container
          name: update-npm
          command: "cd ui && sudo npm install -g npm@latest"
      - restore_cache: # special step to restore the dependency cache
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: dependency-cache-{{ checksum "ui/package.json" }}
      - run: # installs UI dependencies
          name: install-ui
          command: "cd ui && npm install"
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "ui/package.json" }}
          paths:
            - ./node_modules
      - run: # run tests
          name: test
          command: "cd ui && npm test"
      - run: # builds project
          name: build
          command: "cd ui && npm run build"
  test-build-api: # runs not using Workflows must have a `build` job as entry point
    working_directory: ~/api # directory where steps will run
    docker: # run the steps with Docker
    - image: circleci/node:10.14.1 # ...with this image as the primary container; this is where all `steps` will run
    steps: # a collection of executable commands
    - checkout # special step to check out source code to working directory
    - run: # updates NPM, installs in container
        name: update-npm
        command: "cd api && sudo npm install -g npm@latest"
    - restore_cache: # special step to restore the dependency cache
        # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
        key: dependency-cache-{{ checksum "api/package.json" }}
    - run: # installs UI dependencies
        name: install-api
        command: "cd api && npm install"
    - save_cache: # special step to save the dependency cache
        key: dependency-cache-{{ checksum "api/package.json" }}
        paths:
        - ./node_modules
    - run: # run tests
        name: test
        command: "cd api && npm test"
  test-build-docker-compose:
    working_directory: ~/docker-compose
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout # The first step, checkout, is a special step to check out the source code; this will be downloaded to the directory specified by working_directory.
      - setup_remote_docker # This step helps you avoid the Docker-in-Docker problem
      - run: # necessary to add docker-compose dependency
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              docker-compose==1.12.0 \
      - restore_cache:
          keys:
            - v1-{{ .Branch }} # When there’s a cache suffixed with v1-{{ <branch name> }}, CircleCI will restore your directory to /caches/app.tar.
          paths:
            - /caches/ui-test.tar #  app.tar is the Docker image file from the previous build. When /caches/app.tar exists, Docker will load it, allowing us to reuse images from previous builds.
            - /caches/api-test.tar
      - run:
          name: Load Docker image layer cache ui-test
          command: |
            set +o pipefail
            docker load -i /caches/ui-test.tar | true
      - run: # When you build a Docker image, you’ll need to specify --cache-from=<image name>.
          name: Build application Docker image ui-test
          command: |
            docker build -f /ui/Dockerfile.test --cache-from=ui-test -t ui-test .
      - run: # We’ll save the Docker image we built in /caches/app.tar.
          name: Save Docker image layer cache ui-test 
          command: |
            mkdir -p /caches
            docker save -o /caches/ui-test.tar ui-test
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}-ui-test
          paths:
            - /caches/ui-test.tar
            - run:
          name: Load Docker image layer cache ui-test
          command: |
            set +o pipefail
            docker load -i /caches/api-test.tar | true
      - run: # When you build a Docker image, you’ll need to specify --cache-from=<image name>.
          name: Build application Docker image ui-test
          command: |
            docker build -f /api/Dockerfile.test --cache-from=api-test -t api-test .
      - run: # We’ll save the Docker image we built in /caches/app.tar.
          name: Save Docker image layer cache api-test 
          command: |
            mkdir -p /caches
            docker save -o /caches/api-test.tar api-test
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}-api-test
          paths:
            - /caches/api-test.tar
      - run:
          name: Run tests
          command: |
            docker-compose -f ./tests-heroku.yml up --build
  heroku-deploy-ui:
    working_directory: ~/ui # directory where steps will run
    docker: # run the steps with Docker
      - image: circleci/node:10.14.1 # ...with this image as the primary container; this is where all `steps` will run
    steps:
      - checkout
      - run: # sets git user
          name: set git user
          command: "git config --global user.email 'admin@odevs.ca' && git config --global user.name 'admin'"
      - run:
          name: create git repo
          command: "cd ui && git init"
      - run:
          name: commit to new repo
          command: "cd ui && git add . && git commit -m 'circle ci heroku staging deploy'"
      - run:
          name: Deploy Master to Heroku
          command: "cd ui && git push -f --set-upstream https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_UI_APP.git master"
  heroku-deploy-api:
    working_directory: ~/api # directory where steps will run
    docker: # run the steps with Docker
    - image: circleci/node:10.14.1 # ...with this image as the primary container; this is where all `steps` will run
    steps:
    - checkout
    - run: # sets git user
        name: set git user
        command: "git config --global user.email 'admin@odevs.ca' && git config --global user.name 'admin'"
    - run:
        name: create git repo
        command: "cd api && git init"
    - run:
        name: commit to new repo
        command: "cd api && git add . && git commit -m 'circle ci heroku staging deploy'"
    - run:
        name: Deploy Master to Heroku
        command: "cd api && git push -f --set-upstream https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_API_APP.git master"
